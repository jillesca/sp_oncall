"""Define the state structures for the agent."""

from __future__ import annotations


from typing import TypedDict, List, Dict, Any, Optional


class ExecutedToolCall(TypedDict):
    """Represents the details of a specific tool call made by the executor LLM"""

    function: str  # Name of the tool called (e.g., "get_routing_info")
    params: Dict[str, Any]  # Parameters used for the function call
    result: Optional[
        Dict[str, Any]
    ]  # Structured result from the tool (if successful)
    error: Optional[str]  # Error message (if failed)
    detailed_findings: str  # Detailed findings from the step execution


class StepExecutionResult(TypedDict):
    """Represents the outcome of executing one natural language plan step"""

    investigation_report: str  # Report generated by the LLM for this step
    tools_limitations: str  # Limitations encountered during the step execution
    executed_calls: List[
        ExecutedToolCall
    ]  # List of actual tool calls the LLM made for this step


class GraphState(TypedDict):
    """The state object used by the LangGraph workflow"""

    user_query: str
    device_name: str
    objective: str  # Set by Input Validator & Planner
    working_plan_steps: List[str]  # Set by Input Validator & Planner
    execution_results: List[
        StepExecutionResult
    ]  # Appended to by Network Executor
    # Fields for the Objective Assessor node and loop control
    max_retries: int  # Initialized by Input Validator & Planner (e.g., 2 or 3)
    current_retries: int  # Initialized to 0 by Input Validator & Planner, incremented by Objective Assessor
    objective_achieved_assessment: Optional[
        bool
    ]  # Set by Objective Assessor. True to proceed to report, False to retry.
    assessor_feedback_for_retry: Optional[
        str
    ]  # Set by Objective Assessor for Network Executor if retrying
    assessor_notes_for_final_report: Optional[
        str
    ]  # Set by Objective Assessor for Report Generator

    summary: Optional[str]  # Final output from Report Generator
